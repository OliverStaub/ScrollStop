name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string

env:
  NODE_VERSION: '18'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_version.outputs.tag_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag_name=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git tag --sort=-version:refname | head -n 2 | tail -n 1)
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          echo "## Changes" > changelog.md
          echo "$COMMITS" >> changelog.md

          echo "Generated changelog:"
          cat changelog.md

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.tag_name }}
          release_name: ScrollStop ${{ steps.get_version.outputs.tag_name }}
          body_path: changelog.md
          draft: false
          prerelease: false

  build-and-upload-macos:
    name: Build and Upload macOS
    runs-on: macos-latest
    needs: create-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Build macOS Extension (Release)
        run: |
          xcodebuild -project ScrollStop.xcodeproj \
            -scheme "ScrollStop (macOS)" \
            -configuration Release \
            -archivePath ScrollStop-macOS.xcarchive \
            archive \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO

      - name: Export macOS App
        run: |
          xcodebuild -exportArchive \
            -archivePath ScrollStop-macOS.xcarchive \
            -exportPath ScrollStop-macOS-Export \
            -exportOptionsPlist Scripts/ExportOptions-macOS.plist || \
          # Fallback: just copy the app from archive
          mkdir -p ScrollStop-macOS-Export && \
          cp -R ScrollStop-macOS.xcarchive/Products/Applications/*.app ScrollStop-macOS-Export/

      - name: Create macOS ZIP
        run: |
          cd ScrollStop-macOS-Export
          zip -r ../ScrollStop-macOS-${{ needs.create-release.outputs.tag_name }}.zip *.app

      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ScrollStop-macOS-${{ needs.create-release.outputs.tag_name }}.zip
          asset_name: ScrollStop-macOS-${{ needs.create-release.outputs.tag_name }}.zip
          asset_content_type: application/zip

  build-and-upload-ios:
    name: Build and Upload iOS
    runs-on: macos-latest
    needs: create-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Build iOS Extension (Release)
        run: |
          xcodebuild -project ScrollStop.xcodeproj \
            -scheme "ScrollStop (iOS)" \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath ScrollStop-iOS.xcarchive \
            archive \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO

      - name: Export iOS App
        run: |
          xcodebuild -exportArchive \
            -archivePath ScrollStop-iOS.xcarchive \
            -exportPath ScrollStop-iOS-Export \
            -exportOptionsPlist Scripts/ExportOptions-iOS.plist || \
          # Fallback: just copy the app from archive
          mkdir -p ScrollStop-iOS-Export && \
          cp -R ScrollStop-iOS.xcarchive/Products/Applications/*.app ScrollStop-iOS-Export/

      - name: Create iOS ZIP
        run: |
          cd ScrollStop-iOS-Export
          zip -r ../ScrollStop-iOS-${{ needs.create-release.outputs.tag_name }}.zip *.app *.ipa || \
          zip -r ../ScrollStop-iOS-${{ needs.create-release.outputs.tag_name }}.zip *.app

      - name: Upload iOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ScrollStop-iOS-${{ needs.create-release.outputs.tag_name }}.zip
          asset_name: ScrollStop-iOS-${{ needs.create-release.outputs.tag_name }}.zip
          asset_content_type: application/zip

  create-extension-package:
    name: Create Extension Package
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run validation
        run: npm run validate

      - name: Create Extension Source Package
        run: |
          mkdir -p ScrollStop-Extension-Source
          cp -R "Shared (Extension)/Resources/"* ScrollStop-Extension-Source/
          zip -r ScrollStop-Extension-Source-${{ needs.create-release.outputs.tag_name }}.zip ScrollStop-Extension-Source

      - name: Upload Extension Source Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ScrollStop-Extension-Source-${{ needs.create-release.outputs.tag_name }}.zip
          asset_name: ScrollStop-Extension-Source-${{ needs.create-release.outputs.tag_name }}.zip
          asset_content_type: application/zip

  update-app-store:
    name: Update App Store Metadata
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload-ios]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update App Store Connect metadata
        run: |
          echo "üì± Placeholder: Update App Store Connect metadata"
          echo "Version: ${{ needs.create-release.outputs.tag_name }}"
          # Add actual App Store Connect API calls here when ready

      - name: Update Mac App Store metadata
        run: |
          echo "üíª Placeholder: Update Mac App Store metadata" 
          echo "Version: ${{ needs.create-release.outputs.tag_name }}"
          # Add actual Mac App Store upload when ready

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload-macos, build-and-upload-ios, create-extension-package]
    if: always()

    steps:
      - name: Check release status
        run: |
          echo "üöÄ Release ${{ needs.create-release.outputs.tag_name }} completed!"
          echo "‚úÖ macOS build: ${{ needs.build-and-upload-macos.result }}"
          echo "‚úÖ iOS build: ${{ needs.build-and-upload-ios.result }}"
          echo "‚úÖ Extension package: ${{ needs.create-extension-package.result }}"

          if [[ "${{ needs.build-and-upload-macos.result }}" == "failure" || 
                "${{ needs.build-and-upload-ios.result }}" == "failure" || 
                "${{ needs.create-extension-package.result }}" == "failure" ]]; then
            echo "‚ùå Some builds failed"
            exit 1
          else
            echo "üéâ All builds successful!"
          fi
